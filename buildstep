#!/bin/bash
#
# Initialize the container with the necessary in order to start the web application
#
# Original code from the progrium/buildstep github repository
set -eou pipefail

# http://stackoverflow.com/questions/59895/can-a-bash-script-tell-what-directory-its-stored-in
BUILDSTEP_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

. ${BUILDSTEP_DIR}/deploy_lib.sh

BASE_DIR="$(readlink -f ${1:?usage: cat release.tar | buildstep <base dir> [<base image>]})"

# TODO: sanitaze user input (you know, ";", "/", "..", "`")
# http://stackoverflow.com/questions/89609/in-a-bash-script-how-do-i-sanitize-user-input
CLEANSTRING=${STRING//[^a-zA-Z0-9]/}

APP_NAME=$(read_file_content "$1/NAME")
BASE_IMAGE=${2:-progrium/buildstep}
IMAGE="${APP_NAME}/app"

# TODO: add check for app home dir structure (LINKS/MOUNTS/ENV/NAME)


LINKS_OPTS="$(build_parameter_from_file_lines ${BASE_DIR}/LINKS --link)"
MOUNTS_OPTS="$(build_parameter_from_file_lines ${BASE_DIR}/MOUNTS -v)"

# mount cache https://github.com/gliderlabs/herokuish/blob/master/include/herokuish.bash
VOLUME_CACHE="-v ${BASE_DIR}/.buildstep_cache/:/tmp/cache/"

is_running() {
    test "$(docker inspect -f {{.State.Running}} $1)" == "true" && return 0
    return 1
}

echo '-----> Initialization '$IMAGE' using '$BASE_IMAGE

# Place the app inside the container. If you already have app inside your tar, use /bin/bash -c "tar -x"
ID=$(cat | docker run -i -a stdin ${LINKS_OPTS} ${BASE_IMAGE} /bin/bash -c "mkdir -p /app && tar -xC /app")
test $(docker wait $ID) -eq 0
docker commit $ID ${IMAGE} > /dev/null

echo '-----> build '$IMAGE
# Mount .heroku externally so to use it like a cache and allowing rebuilding wo fetching all the things
ID=$(docker run --env-file "${BASE_DIR}/ENV" ${VOLUME_CACHE} ${LINKS_OPTS} -d $IMAGE /build/builder)
docker attach $ID
test "$(docker wait $ID)" -eq 0
docker commit $ID $IMAGE > /dev/null
